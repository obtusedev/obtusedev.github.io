<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Snippets on obtusedev</title><link>https://obtuse.dev/snippets/</link><description>Recent content in Snippets on obtusedev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 02 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://obtuse.dev/snippets/index.xml" rel="self" type="application/rss+xml"/><item><title>ExpressJS</title><link>https://obtuse.dev/snippets/expressjs/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/expressjs/</guid><description>Common project structure/folders:
src/ models: What your data looks like controllers: seperating routes from logic middleware: general purpose middleware routes: routes grouping like api/v1, api/v2 view: templating engine public: public files, css, favicon configs: configuration files for template engine, db assets: images, video services: db/business logic? I usually put this in models. This can also be for 3rd party api like stripe, aws helper: helper functions /test tests: test for code Some common naming conventions:</description></item><item><title>Fetch API</title><link>https://obtuse.dev/snippets/fetch/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/fetch/</guid><description>fetch api is used for fetching resources like api calls.
It was brower only but is now coming to node.
fetch returns a Response object which then needs to be turned into JSON.
console.log(fetch(&amp;#34;http://httpbin.org/get&amp;#34;)); // Promise fetch(&amp;#34;http://httpbin.org/get&amp;#34;).then(res =&amp;gt; console.log(res)); // Response object fetch(&amp;#34;http://httpbin.org/get&amp;#34;).then(res =&amp;gt; res.json()); // returns aother Promise fetch(&amp;#34;http://httpbin.org/get&amp;#34;) .then(res =&amp;gt; res.json()) .then(data =&amp;gt; console.log(data)); // logs data fetch doesn&amp;rsquo;t stop even if it gets a 404 by default. Use res.</description></item><item><title>Git</title><link>https://obtuse.dev/snippets/git/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/git/</guid><description>Configs: Priority lowest to highest -&amp;gt; system wide (&amp;ndash;system) -&amp;gt; user specific (&amp;ndash;global) -&amp;gt; repo specific (&amp;ndash;local)
git config --list Help:
--help // open in new tab full man page help // open in new tab full man page -h // show in terminal git help -a // list all commands Adding to staging:
git add &amp;lt;file&amp;gt; git add -A git add . git add -u git add -p Check staging:</description></item><item><title>Go</title><link>https://obtuse.dev/snippets/go/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/go/</guid><description>Creating new error:
import ( &amp;#34;errors&amp;#34; ) errors.New(&amp;#34;New error&amp;#34;) Common error handling pattern:
if err != nil { // do stuff } // shorthand if res, err := GetResult(); err != nil { // handle error } Connecting to db(sqlite in this case):
import ( &amp;#34;database/sql&amp;#34; _ &amp;#34;github.com/mattn/go-sqlite3&amp;#34; // blank identifier/import to prevent go compiler from removing ) func run() err { db, err := sql.Open(&amp;#34;sqlite3&amp;#34;, &amp;#34;path/to/db&amp;#34;) if err != nil { return err } defer db.</description></item><item><title>Vue 3</title><link>https://obtuse.dev/snippets/vue3/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/vue3/</guid><description>Preventing template from rendering:
&amp;lt;style&amp;gt; [v-cloak] { display: none; /* Prevents {{}} from rendering until fully loaded */ } &amp;lt;/style&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34; v-cloak&amp;gt;&amp;lt;/div&amp;gt; Vue 3 setup in script:
&amp;lt;script src=&amp;#34;https://unpkg.com/vue@next&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; let app = Vue.createApp({ data() { return { } } }) app.mount(&amp;#34;#app&amp;#34;) &amp;lt;script&amp;gt; v-show vs v-if: v-show renders but sets display: none; while v-if doesn&amp;rsquo;t render at all.
v-show is better if you are toggling a component frequently as it is more performant.</description></item><item><title/><link>https://obtuse.dev/snippets/css/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/css/</guid><description>rem vs em: em is better for things like button padding since it uses the elements font size.</description></item><item><title>Docker</title><link>https://obtuse.dev/snippets/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/docker/</guid><description>foo@bar:~$ docker ps</description></item><item><title>JavaScript</title><link>https://obtuse.dev/snippets/javascript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/javascript/</guid><description>Self executing function:
(async function () { const res = await fetch(&amp;#34;http://httpbin.org/get&amp;#34;); })(); // () can also be inside next to } typeof for undefined:
console.log(typeof undef); // &amp;#34;undefined&amp;#34; is returned in quotes so be sure not to === undefined Encoding strings safely for urls
let url = &amp;#34;test?&amp;#34;; encodeURIComponent(url); //=&amp;gt; &amp;#39;test%3F&amp;#39;</description></item><item><title>JavaScript DOM manipulations</title><link>https://obtuse.dev/snippets/dom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/dom/</guid><description>Selecting elements:
document.querySelector(&amp;#34;#app&amp;#34;); document.querySelectorAll(&amp;#34;a&amp;#34;); Creating elements:
document.createElement() Appending elements:
const body = document.body; body.append();</description></item><item><title>Linux Commands</title><link>https://obtuse.dev/snippets/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/linux/</guid><description>Show open ports with program names
netstat -lntup</description></item></channel></rss>