<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>obtusedev</title><link>https://obtuse.dev/</link><description>Recent content on obtusedev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 09 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://obtuse.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>CORS - Cross-Origin Resource Sharing</title><link>https://obtuse.dev/posts/cors/</link><pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/posts/cors/</guid><description>Examples of same origin request foo.com requesting image on foo.com domain
Examples of cross origin request
foo.com fetching data from bar.com localhost:3000 fetching data from server no localhost:5000
might give a CORS error
SAME-ORIGIN POLICY - browser security
foo.com can get images from foo.com but not from other domains like bar.com
When you make a request there is the Origin header which might look like Origin: foo.com
Access-Control-Allow-Origin header needs to match Origin header or &amp;lsquo;*&amp;rsquo; wildcard to match any domain in order to get permission</description></item><item><title>humbled</title><link>https://obtuse.dev/posts/1-humbled/</link><pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/posts/1-humbled/</guid><description>Went through a course for Go and saw a section on Go comments. Here I thought it was easy and that I knew everything there was about comments in Go. // and /**/ inline blocks and block comments.
I stand corrected and now I understand the depth of comments in Go. That the documentation comments must end in a period, immediately precede a declaration and start with the name of the item you are documenting.</description></item><item><title>ExpressJS</title><link>https://obtuse.dev/snippets/expressjs/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/expressjs/</guid><description>Common project structure/folders:
src/ models: What your data looks like controllers: seperating routes from logic middleware: general purpose middleware routes: routes grouping like api/v1, api/v2 view: templating engine public: public files, css, favicon configs: configuration files for template engine, db assets: images, video services: db/business logic? I usually put this in models. This can also be for 3rd party api like stripe, aws helper: helper functions /test tests: test for code Some common naming conventions:</description></item><item><title>Fetch API</title><link>https://obtuse.dev/snippets/fetch/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/fetch/</guid><description>fetch api is used for fetching resources like api calls.
It was brower only but is now coming to node.
fetch returns a Response object which then needs to be turned into JSON.
console.log(fetch(&amp;#34;http://httpbin.org/get&amp;#34;)); // Promise fetch(&amp;#34;http://httpbin.org/get&amp;#34;).then(res =&amp;gt; console.log(res)); // Response object fetch(&amp;#34;http://httpbin.org/get&amp;#34;).then(res =&amp;gt; res.json()); // returns aother Promise fetch(&amp;#34;http://httpbin.org/get&amp;#34;) .then(res =&amp;gt; res.json()) .then(data =&amp;gt; console.log(data)); // logs data fetch doesn&amp;rsquo;t stop even if it gets a 404 by default. Use res.</description></item><item><title>Git</title><link>https://obtuse.dev/snippets/git/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/git/</guid><description>gitk --all</description></item><item><title>Go</title><link>https://obtuse.dev/snippets/go/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/go/</guid><description>Creating new error:
import ( &amp;#34;errors&amp;#34; ) errors.New(&amp;#34;New error&amp;#34;) Common error handling pattern:
if err != nil { // do stuff } // shorthand if res, err := GetResult(); err != nil { // handle error } Connecting to db(sqlite in this case):
import ( &amp;#34;database/sql&amp;#34; _ &amp;#34;github.com/mattn/go-sqlite3&amp;#34; // blank identifier/import to prevent go compiler from removing ) func run() err { db, err := sql.Open(&amp;#34;sqlite3&amp;#34;, &amp;#34;path/to/db&amp;#34;) if err != nil { return err } defer db.</description></item><item><title>Vue 3</title><link>https://obtuse.dev/snippets/vue3/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/vue3/</guid><description>Preventing template from rendering:
&amp;lt;style&amp;gt; [v-cloak] { display: none; /* Prevents {{}} from rendering until fully loaded */ } &amp;lt;/style&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34; v-cloak&amp;gt;&amp;lt;/div&amp;gt; Vue 3 setup in script:
&amp;lt;script src=&amp;#34;https://unpkg.com/vue@next&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; let app = Vue.createApp({ data() { return { } } }) app.mount(&amp;#34;#app&amp;#34;) &amp;lt;script&amp;gt; v-show vs v-if: v-show renders but sets display: none; while v-if doesn&amp;rsquo;t render at all.
v-show is better if you are toggling a component frequently as it is more performant.</description></item><item><title>About me</title><link>https://obtuse.dev/about/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/about/</guid><description>Hi, I&amp;rsquo;m a web developer with an interest in devops.
Here are some of the technologies I am currently using/learning:
Languages JavaScript - Using Go - Using TypeScript - To Learn Python - To Learn Kotlin - To Learn Rust - To Learn Libraries/Frameworks Node.js - Using Vue.js - Using React - To Learn Databases SQLite 3 - Using MongoDB - To Learn PostgreSQL - To Learn Redis - To Learn DevOps Docker - To Learn Kubernetes - To Learn Github actions - To Learn Tools Visual Studio Code - Using Vim - Using PyCharm - Using Sublime Text - Using macOS, Windows, Ubuntu - Using</description></item><item><title>SQLite 3</title><link>https://obtuse.dev/posts/sqlite3/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/posts/sqlite3/</guid><description>Output mode graphic: https://www.log4code.com/wp-content/uploads/2021/02/SQLite-Output-Modes.pdf
SQLite 3 is a embeded file or memeory based sql database used in places l</description></item><item><title/><link>https://obtuse.dev/posts/todo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://obtuse.dev/posts/todo/</guid><description>TODO: https://www.youtube.com/watch?v=XF1_MlZ5l6M EVENT LISTENERS TODO: https://www.youtube.com/watch?v=y17RuWkWdn8 DOM MANIPULATIONS TODO: https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/ REST API DESIGN TODO: cookies vs sessions vs jwt TODO: jwt best practices TODO: find out how table of contents work</description></item></channel></rss>