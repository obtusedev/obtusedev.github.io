<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on obtusedev</title><link>https://obtuse.dev/tags/go/</link><description>Recent content in go on obtusedev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 02 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://obtuse.dev/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go</title><link>https://obtuse.dev/snippets/go/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/snippets/go/</guid><description>Creating new error:
import ( &amp;#34;errors&amp;#34; ) errors.New(&amp;#34;New error&amp;#34;) Common error handling pattern:
if err != nil { // do stuff } // shorthand if res, err := GetResult(); err != nil { // handle error } Connecting to db(sqlite in this case):
import ( &amp;#34;database/sql&amp;#34; _ &amp;#34;github.com/mattn/go-sqlite3&amp;#34; // blank identifier/import to prevent go compiler from removing ) func run() err { db, err := sql.Open(&amp;#34;sqlite3&amp;#34;, &amp;#34;path/to/db&amp;#34;) if err != nil { return err } defer db.</description></item></channel></rss>