<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on obtusedev</title><link>https://obtuse.dev/posts/</link><description>Recent content in Posts on obtusedev</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 04 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://obtuse.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>humbled</title><link>https://obtuse.dev/posts/1-humbled/</link><pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/posts/1-humbled/</guid><description>Went through a course for Go and saw a section on Go comments. Here I thought it was easy and that I knew everything there was about comments in Go. // and /**/ inline blocks and block comments.
I stand corrected and now I understand the depth of comments in Go. That the documentation comments must end in a period, immediately precede a declaration and start with the name of the item you are documenting.</description><content type="html"><![CDATA[<p>Went through a course for Go and saw a section on Go comments. Here I thought it was easy and that I knew everything there was about comments in Go. <code>//</code> and <code>/**/</code> inline blocks and block comments.</p>
<p>I stand corrected and now I understand the depth of comments in Go.
That the documentation comments must end in a period, immediately precede a declaration and start with the name of the item you are documenting.</p>
<p><code>godoc</code> to generate the documentations</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Package route contains app routing logic.
</span><span class="c1"></span><span class="kn">package</span> <span class="nx">route</span>

<span class="c1">// secretRoute is a string that represents a route that you want hidden.
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">secretRoute</span> <span class="kt">string</span>

<span class="c1">// authenticatedUser returns true if user is logged in
</span><span class="c1">// or false if user is not and an error for everything else.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">authenticatedUser</span><span class="p">()</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// code
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div>]]></content></item><item><title>SQLite3</title><link>https://obtuse.dev/posts/sqlite3/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>https://obtuse.dev/posts/sqlite3/</guid><description>SQLite 3 SQLite 3 is a embeded file or memeory based sql database used in places l</description><content type="html">&lt;h1 id="sqlite-3">SQLite 3&lt;/h1>
&lt;p>SQLite 3 is a embeded file or memeory based sql database used in places l&lt;/p></content></item></channel></rss>